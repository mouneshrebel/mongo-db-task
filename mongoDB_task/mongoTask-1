1 .Find all the information about each products?
Ans :
db.guvi_data.find({});

output :some data
[
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61c"
    },
    "id": "1",
    "product_name": "Intelligent Fresh Chips",
    "product_price": 655,
    "product_material": "Concrete",
    "product_color": "mint green"
  },{
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61d"
    },
    "id": "2",
    "product_name": "Practical Fresh Sausages",
    "product_price": 911,
    "product_material": "Cotton",
    "product_color": "indigo"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61e"
    },
    "id": "3",
    "product_name": "Refined Steel Car",
    "product_price": 690,
    "product_material": "Rubber",
    "product_color": "gold"
  },]
  
 2. Find the product price which are between 400 to 800 ?
 Ans:
    db.guvi_data.find({product_price : {$gte : 400 , $lte : 800}})
    
    output:
    [
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61c"
    },
    "id": "1",
    "product_name": "Intelligent Fresh Chips",
    "product_price": 655,
    "product_material": "Concrete",
    "product_color": "mint green"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61e"
    },
    "id": "3",
    "product_name": "Refined Steel Car",
    "product_price": 690,
    "product_material": "Rubber",
    "product_color": "gold"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61f"
    },
    "id": "4",
    "product_name": "Gorgeous Plastic Pants",
    "product_price": 492,
    "product_material": "Soft",
    "product_color": "plum"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e621"
    },
    "id": "6",
    "product_name": "Awesome Wooden Towels",
    "product_price": 474,
    "product_material": "Plastic",
    "product_color": "orange"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e622"
    },
    "id": "7",
    "product_name": "Practical Soft Shoes",
    "product_price": 500,
    "product_material": "Rubber",
    "product_color": "pink"
  },
  {
    "_id": {
      "$oid": "64788b8b3fce559a0f24f60a"
    },
    "id": "1",
    "product_name": "Intelligent Fresh Chips",
    "product_price": 655,
    "product_material": "Concrete",
    "product_color": "mint green"
  },
  {
    "_id": {
      "$oid": "64788b8b3fce559a0f24f60c"
    },
    "id": "3",
    "product_name": "Refined Steel Car",
    "product_price": 690,
    "product_material": "Rubber",
    "product_color": "gold"
  },
  {
    "_id": {
      "$oid": "64788b8b3fce559a0f24f60d"
    },
    "id": "4",
    "product_name": "Gorgeous Plastic Pants",
    "product_price": 492,
    "product_material": "Soft",
    "product_color": "plum"
  },
  {
    "_id": {
      "$oid": "64788b8b3fce559a0f24f60f"
    },
    "id": "6",
    "product_name": "Awesome Wooden Towels",
    "product_price": 474,
    "product_material": "Plastic",
    "product_color": "orange"
  },
  {
    "_id": {
      "$oid": "64788b8b3fce559a0f24f610"
    },
    "id": "7",
    "product_name": "Practical Soft Shoes",
    "product_price": 500,
    "product_material": "Rubber",
    "product_color": "pink"
  }
]

 3. Find the product price which are not between 400 to 600 ?
Ans:
 db.guvi_data.find({product_price : {$not : {$gte : 400 , $lte : 600}}})
 
 ouput : sample datas
 {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61c"
    },
    "id": "1",
    "product_name": "Intelligent Fresh Chips",
    "product_price": 655,
    "product_material": "Concrete",
    "product_color": "mint green"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61d"
    },
    "id": "2",
    "product_name": "Practical Fresh Sausages",
    "product_price": 911,
    "product_material": "Cotton",
    "product_color": "indigo"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61e"
    },
    "id": "3",
    "product_name": "Refined Steel Car",
    "product_price": 690,
    "product_material": "Rubber",
    "product_color": "gold"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e620"
    },
    "id": "5",
    "product_name": "Sleek Cotton Chair",
    "product_price": 33,
    "product_material": "Fresh",
    "product_color": "black"
  },
 
4. List the four product which are grater than 500 in price?
  Ans
     db.guvi_data.find({product_price :  {$gt : 500 }})
     
     output : some sample datas
     {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61c"
    },
    "id": "1",
    "product_name": "Intelligent Fresh Chips",
    "product_price": 655,
    "product_material": "Concrete",
    "product_color": "mint green"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61d"
    },
    "id": "2",
    "product_name": "Practical Fresh Sausages",
    "product_price": 911,
    "product_material": "Cotton",
    "product_color": "indigo"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61e"
    },
    "id": "3",
    "product_name": "Refined Steel Car",
    "product_price": 690,
    "product_material": "Rubber",
    "product_color": "gold"
  },
  
5. Find the product name and product material of each products?
Ans:
db.guvi_data.find({},{product_name :1 , product_material : 1});

output :
{
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61c"
    },
    "product_name": "Intelligent Fresh Chips",
    "product_material": "Concrete"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61d"
    },
    "product_name": "Practical Fresh Sausages",
    "product_material": "Cotton"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61e"
    },
    "product_name": "Refined Steel Car",
    "product_material": "Rubber"
  }

6. Find the product with a row id of 10
Ans:
 db.guvi_data.findOne({id : {$eq :"10"}})

output :
{
  "_id": {
    "$oid": "64788b7012216bc1f2d5e625"
  },
  "id": "10",
  "product_name": "Generic Wooden Pizza",
  "product_price": 84,
  "product_material": "Frozen",
  "product_color": "indigo"
}

7. Find only the product name and product material?
Ans:
db.guvi_data.find( {},{ _id : 0,product_name : 1,product_material : 1})

output :
{
    "product_name": "Intelligent Fresh Chips",
    "product_material": "Concrete"
  },
  {
    "product_name": "Practical Fresh Sausages",
    "product_material": "Cotton"
  },
  {
    "product_name": "Refined Steel Car",
    "product_material": "Rubber"
  },
  {
    "product_name": "Gorgeous Plastic Pants",
    "product_material": "Soft"
  },
  {
    "product_name": "Sleek Cotton Chair",
    "product_material": "Fresh"
  },
  
   8. Find all products which contain the value of soft in product material ?
Ans:
 db.guvi_data.find({product_material : {$eq : "Soft" }});
 
 output: some examples
 {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e61f"
    },
    "id": "4",
    "product_name": "Gorgeous Plastic Pants",
    "product_price": 492,
    "product_material": "Soft",
    "product_color": "plum"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e624"
    },
    "id": "9",
    "product_name": "Awesome Wooden Ball",
    "product_price": 28,
    "product_material": "Soft",
    "product_color": "azure"
  },
  {
    "_id": {
      "$oid": "64788b7012216bc1f2d5e626"
    },
    "id": "11",
    "product_name": "Unbranded Wooden Cheese",
    "product_price": 26,
    "product_material": "Soft",
    "product_color": "black"
  },

9. Find products which contain product color indigo  and product price 492.00
Ans:
db.guvi_data.find({ product_color: {$eq : "indigo"}, product_price: {$eq : 492}});

ouput:[]

10.  Delete the products which product price value are same?
Ans:
db.guvi_data.deleteMany({product_price : {$eq : 911}})

output : 
{
  "acknowledged": true,
  "deletedCount": 2
}
